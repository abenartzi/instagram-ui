{"version":3,"sources":["Images/headerImage/instagramLogo.png","Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","Settings/Settings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","alt","logo","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","TagList","this","props","tags","map","tag","i","key","href","Post","heartSetColor","e","state","like","setState","color","icon","faCalendarAlt","created","faUserCircle","size","image","imageId","title","onClick","faHeart","style","likes","Feed","posts","loading","fetch","then","res","json","override","css","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","sizeUnit","post","Profile","Settings","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f76e8c4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/instagramLogo.0a3a43fb.png\";","import React, {Component} from 'react';\nimport './Header.scss'\nimport {Link} from \"react-router-dom\";\nimport logo from \"../Images/headerImage/instagramLogo.png\"\n\nclass Header extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixedNav\">\n                <div>\n                    <Link to={\"/\"} className=\"navbar navbar-expand-lg navbar-light\">\n                    <img  src=\"https://img.icons8.com/nolan/64/000000/instagram-new.png\" alt=\"#\"/>\n                    <div className=\"vl\"></div>\n                    <img className=\"instaLogo\" src={logo} alt=\"instagramLogo\"/>\n                </Link>\n                </div>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/profile\">Profile <span className=\"sr-only\">(current)</span></Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/settings\" className=\"nav-link\">Settings</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Header;\n\n","import React, {Component} from 'react';\nclass TagList extends Component {\n    render() {\n        return (\n            <div >\n                {this.props.tags.map((tag,i) => {\n                    return <div key={i} className=\"tag\"><a href=\"#\">#{tag}</a></div>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default TagList;","import React, {Component} from 'react';\nimport './Post.scss'\nimport TagList from \"./TagList/TagList\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCalendarAlt, faHeart, faUserCircle} from '@fortawesome/free-solid-svg-icons'\nimport {Link} from \"react-router-dom\";\n\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            color : 'black',\n            like: false\n        }\n    }\n\n    heartSetColor = (e) => {\n        if(!this.state.like){\n            return this.setState({color:'red',like:true})\n        }else{\n            return this.setState({color:'black',like:false})\n        }\n    }\n\n    ;\n\n    render() {\n\n\n        return (\n            <div className=\"d-flex\">\n                <div className=\"card\">\n\n                    <div className=\"card-header\">\n                            <span className=\"cardDate\">\n                            <FontAwesomeIcon className={\"calIcon\"} icon={faCalendarAlt}/>\n                            <span className=\"card-text\">{this.props.created}</span>\n                            </span>\n\n                        <Link to={\"/profile\"} href={\"#\"} className=\"card-title\"><FontAwesomeIcon className=\"userCircleIcon\" icon={faUserCircle} size=\"2x\"/></Link>\n                    </div>\n\n                    <div className=\"userImage\">\n                        <img src={this.props.image} alt={this.props.imageId}/>\n                    </div>\n\n                    <div className=\"card-body\">\n\n                            <div><h5 className=\"card-title\">{this.props.title}</h5></div>\n\n                        <footer className={'cardFooter'}>\n                            <TagList tags={this.props.tags}/>\n                            <div className=\"card-text\" onClick={this.heartSetColor}><FontAwesomeIcon className=\"heartIcon\" icon={faHeart} style={{color:this.state.color}}/>{this.props.likes}</div>\n                        </footer>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport { css } from '@emotion/core';\nimport { GridLoader } from 'react-spinners';\n\nimport './Feed.scss';\nimport Post from \"./Post/Post\";\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts:[],\n            loading:false\n        }\n    }\n\n    componentDidMount() {\n        this.setState({loading: true});\n        fetch('https://my-json-server.typicode.com/evyros/fake-api/posts')\n            .then(res => res.json())\n            .then(posts => {\n                this.setState({posts,loading:false})\n            })\n    }\n\n    render() {\n\n        const override = css`\n            display:block;\n            margin: 0 auto;\n            border-color:#5798ff;\n        `;\n\n        function timeConverter(UNIX_timestamp) {\n             let a = new Date(UNIX_timestamp * 1000);\n             let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n             let year = a.getFullYear();\n             let month = months[a.getMonth()];\n             let date = a.getDate();\n\n             let time = `${date} ${month} ${year}`;\n            return time;\n\n        }\n\n        return (\n            <div>\n                <div className=\"heightPlaceholder\"></div>\n                <div className=\"loading\">\n                {this.state.loading ?\n                    <div>\n                        <GridLoader\n                        css={override}\n                        sizeUnit={\"px\"}\n                        size={80}\n                        color={'#5798ff'}\n                        loading={this.state.loading}/>\n                    </div> : null\n                }\n                </div>\n                <div className='container'>\n                    {this.state.posts.map(post =>{\n                        return <Post\n                            key={post.id}\n                            created={timeConverter(post.created)}\n                            image={post.image}\n                            title={post.title}\n                            likes={post.likes}\n                            tags={post.tags}\n                        />\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Feed;\n","import React, {Component} from 'react';\nimport './Profile.scss'\n\nclass Profile extends Component {\n    render() {\n\n        return (\n            <div className=\"heightPlaceholder\">\n                Profile\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, {Component} from 'react';\n\nclass Settings extends Component {\n    render() {\n        return (\n            <div className=\"heightPlaceholder\">\n                Settings Page!\n            </div>\n        );\n    }\n}\n\nexport default Settings;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport Settings from \"./Settings/Settings\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"App\">\n          <Header />\n            <main>\n                <Switch>\n                    <Route path=\"/settings\">\n                        <Settings/>\n                    </Route>\n                    <Route path=\"/profile\">\n                        <Profile/>\n                    </Route>\n                    <Route path=\"/\">\n                        <Feed/>\n                    </Route>\n                </Switch>\n            </main>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}